{"version":3,"sources":["Select.js","Image.js","App.js","serviceWorker.js","index.js"],"names":["Select","state","breeds","breed","_this","props","image","subbreed","change","event","setState","target","value","subbreeds","changeSubbreed","this","fetchDogs","_this2","fetch","then","res","json","result","isLoaded","message","error","_this$state","length","react_default","a","createElement","onChange","data-test","map","key","id","Object","keys","Component","Image","fetchImage","concat","newBreed","url","nextProps","Fragment","src","alt","className","onClick","randomize","bind","App","data","children","push","src_Select","src_Image","App_DogComponent","DogComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c845476.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Select extends Component {\n\n  state = {\n    breeds: null,\n    breed: this.props.breed,\n    image: null,\n    subbreed: null\n  };\n\n  componentDidMount() {\n    const { breed } = this.state;\n    if (!breed) {\n      this.fetchDogs();\n    }\n  }\n\n  fetchDogs() {\n    const url = \"https://dog.ceo/api/breeds/list/all\";\n\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            breeds: result.message\n          });\n\n          this.props.change(result.message);\n        },\n\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  change = (event) => {\n    this.setState({\n      breed: event.target.value,\n      image: null,\n      breeds: this.props.breeds,\n      subbreeds: null\n    });\n\n    this.props.change(event.target.value);\n  }\n\n  changeSubbreed = (event) => {\n    this.setState({\n      subbreed: event.target.value,\n      breed: this.props.breed\n    });\n\n    this.props.change(this.props.breed, event.target.value);\n  }\n\n  render() {\n    const { breeds, breed } = this.state;\n    if (breed && this.props.breeds.length) {\n      return (\n        <select onChange={this.changeSubbreed} data-test=\"subbreeds\">\n          <option>Select subbreed</option>\n          {this.props.breeds.map(subbreed =>\n            <option key={subbreed} value={subbreed}>\n              {subbreed}\n            </option>\n          )}\n        </select>\n      )\n    } else if (breeds) {\n      return (\n        <select onChange={this.change} id=\"breeds\" data-test=\"breeds\">\n          <option>Select breed</option>\n          {Object.keys(breeds).map(breed => (\n            <option key={breed} value={breed}>\n              {breed}\n            </option>\n          ))}\n        </select>\n      );\n    } else {\n      return \"Loading...\";\n    }\n  }\n}\n\nexport default Select;\n","import React, { Component } from 'react';\n\nclass Image extends Component {\n  state = {\n    breed: null,\n    subbreed: null,\n    image: null\n  }\n\n  componentDidMount() {\n    const props = this.props;\n\n    this.setState({\n      breed: props.breed,\n      subbreed: props.subbreed\n    });\n  }\n\n  randomize() {\n    const { breed, subbreed } = this.state;\n\n    if (subbreed) {\n      this.fetchImage(`${breed}/${subbreed}`);\n    } else if (breed) {\n      this.fetchImage(breed);\n    }\n  }\n\n  fetchImage(newBreed) {\n    const url = `https://dog.ceo/api/breed/${newBreed}/images/random`\n    let image;\n\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          image =  result.message;\n\n          this.setState({\n            image: result.message,\n          });\n        },\n\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n\n      return image;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      breed: nextProps.breed,\n      subbreed: nextProps.subbreed\n    });\n\n    if (nextProps.subbreed) {\n      this.fetchImage(`${nextProps.breed}/${nextProps.subbreed}`);\n    } else if (nextProps.breed) {\n      this.fetchImage(nextProps.breed);\n    }\n  }\n\n  render() {\n    const { image } = this.state;\n\n    if (this.props.breed !== null) {\n      return (\n        <>\n          <img key=\"image\" src={image} alt=\"dog\"/>\n          <i className=\"fas fa-sync\" onClick={this.randomize.bind(this)}></i>\n        </>\n      );\n    } else {\n      return ('');\n    }\n  }\n}\n\nexport default Image;\n","import React, { Component } from 'react';\nimport Select from './Select';\nimport Image from './Image';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    breeds: null,\n    breed: null,\n    subbreeds: [],\n    subbreed: null\n  };\n\n  change = (data, breed) => {\n    const { breeds } = this.state;\n\n    // We've selected a single breed and now getting subbreeds if they exist\n    // or we have a subbreed\n    if (data && typeof data === \"string\") {\n      this.setState({\n        breed: data,\n        subbreeds: breeds[data],\n        subbreed: breed\n      });\n\n    } else if (breed) {\n      this.setState({\n        subbreed: breed,\n        image: data\n      });\n    } else {\n      this.setState({\n        breeds: data,\n        isLoaded: true\n      });\n    }\n  }\n\n  render() {\n    const { breeds, breed, isLoaded, subbreeds, subbreed } = this.state;\n    const children = [];\n    let image;\n\n    if (!isLoaded) {\n      children.push(<Select key=\"empty\" change={this.change}/>);\n    } else {\n      children.push(<Select key=\"breeds\" breed={breed} breeds={breeds} change={this.change}/>);\n\n      if (subbreeds.length > 0) {\n        children.push(<Select key=\"subbreeds\" breed={breed} breeds={subbreeds} change={this.change} />);\n      }\n\n      image = <Image key=\"image\" breed={breed} subbreed={subbreed} src='' />;\n    }\n\n    return (\n      <>\n        <DogComponent>\n          {children}\n        </DogComponent>\n          {image}\n      </>\n    );\n  }\n}\n\nconst DogComponent = props => (\n  <div className=\"col-md-4\">{props.children}</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}